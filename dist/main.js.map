{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/**\n * Created by Andrew Rapo on 8/26/15.\n */\n\nimport Sprite from './game/sprite';\nimport MovingObject from './game/movingObject';\nimport Rect from './game/rect';\nimport getTimer from './get-timer';\nimport config from '../config';\n\n// **** CANVAS ****\n\nlet canvas = document.getElementById(\"benchmark-canvas\");\nlet canvasContext = canvas.getContext(\"2d\");\nconsole.log(\"canvas: \" + canvas + \", \" + canvasContext);\n\nlet spriteList = [];\nlet spriteCount = 4;\nlet crystal_sprite = new Sprite(\"crystal\", null, 20, 20);\ncrystal_sprite.load(\"./images/crystal.png\", onSpriteReady);\n\nlet player_sprite = new Sprite(\"player\", null, 20, 20);\nplayer_sprite.load(\"./images/player.png\", onSpriteReady);\n\nlet debris_sprite = new Sprite(\"debris\", null, 20, 20);\ndebris_sprite.load(\"./images/debris.png\", onSpriteReady);\n\nlet bullet_sprite = new Sprite(\"bullet\", null, 20, 20);\nbullet_sprite.load(\"./images/bullet.png\", onSpriteReady);\n\nlet spritesLoaded = 0;\nlet movingObjects = [];\n\nlet testEnded = false;\nlet testSpritesIncrement = config.testSpritesIncrement;\nlet maxRenderedSprites = config.maxRenderedSprites;\nlet testIterationInterval = config.testIterationInterval;\nlet clearCanvasPerFrame = config.clearCanvasPerFrame;\nlet clearSpritePerFrame = config.clearSpritePerFrame;\nlet useSetTimeout = config.useSetTimeout;\nlet throttleFramerate = config.throttleFramerate;\nlet maxFPS = config.maxFPS;\nlet displayStatsPerFrame = config.displayStatsPerFrame;\nlet testIteration = 0;\nlet testIterationElapsedTime = null;\nlet testSpritesCount = testSpritesIncrement;\nlet score = 0;\n\nlet lastFrameTimeMs = null,\n    delta = 0,\n    timestep = 1000 / maxFPS,\n    gameFPS = null,\n    systemFPS = null,\n    gameFramesThisSecond = 0,\n    systemFramesThisSecond = 0,\n    lastFpsUpdate = null;\n\n// **** TEST **** //\n\nfunction updateTestInterval(dTime) {\n    if (testIterationElapsedTime === null) {\n        testIterationElapsedTime = 0;\n        testIteration = 0;\n        testSpritesCount = testSpritesIncrement;\n        testEnded = false;\n        score = 0;\n        console.log(`Test Started...`);\n    } else {\n        testIterationElapsedTime += dTime;\n    }\n\n    if (testIterationElapsedTime >= testIterationInterval) {\n        testIterationElapsedTime = 0;\n        console.log(`Test Iteration ${testIteration} Completed: System FPS: ${systemFPS}, Sprites: ${testSpritesCount}`);\n        score += Math.round(systemFPS);\n        testIteration++;\n        testSpritesCount += testSpritesIncrement;\n\n        if (testSpritesCount > maxRenderedSprites) {\n            testEnded = true;\n            console.log(`Test Completed!`);\n            fillText(canvasContext, \"Test Completed! Score: \" + score, \"12pt Courier New\", 10, 140, \"#FFFFFF\");\n        }\n    }\n\n}\n\n// **** MAIN LOOP ****\n\nfunction step(timestamp) {\n    if (!timestamp) {\n        timestamp = Date.now();\n    }\n\n    if (!lastFrameTimeMs) {\n        lastFrameTimeMs = timestamp;\n    }\n\n    if (!lastFpsUpdate) {\n        lastFpsUpdate = timestamp;\n    }\n\n    systemFramesThisSecond++;\n    gameFramesThisSecond++;\n\n    let dTime = timestamp - lastFrameTimeMs;\n    //console.log(`${timestamp}: ${dTime}`);\n    lastFrameTimeMs = timestamp;\n\n    if (clearCanvasPerFrame) {\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    updateTestInterval(dTime);\n    if (!testEnded) {\n        for (let i=0; i < testSpritesCount; i++) {\n            let obj = movingObjects[i];\n            obj.update(dTime);\n            if (!obj.inBounds) {\n                obj.coords.x = obj.bounds.left;\n            }\n            obj.draw(canvasContext, null);\n        }\n        if (useSetTimeout) {\n            setTimeout(step,1);\n        } else {\n            window.requestAnimationFrame(step);\n        }\n    }\n\n    if (timestamp > lastFpsUpdate + 1000) {\n        if (!gameFPS) gameFPS = gameFramesThisSecond;\n        if (!systemFPS) systemFPS = systemFramesThisSecond;\n\n        gameFPS = 0.25 * gameFramesThisSecond + 0.75 * gameFPS;\n        systemFPS = 0.25 * systemFramesThisSecond + 0.75 * systemFPS;\n\n        lastFpsUpdate = timestamp;\n        gameFramesThisSecond = 0;\n        systemFramesThisSecond = 0;\n    }\n\n    if (displayStatsPerFrame) {\n        fillText(canvasContext, \"Game FPS: \" + Math.round(gameFPS), \"12pt Courier New\", 10, 60, \"#FFFFFF\");\n        fillText(canvasContext, \"System FPS: \" + Math.round(systemFPS), \"12pt Courier New\", 10, 80, \"#FFFFFF\");\n        fillText(canvasContext, \"dTime: \" + dTime, \"12pt Courier New\", 10, 100, \"#FFFFFF\");\n        fillText(canvasContext, \"Sprites: \" + testSpritesCount, \"12pt Courier New\", 10, 120, \"#FFFFFF\");\n    }\n}\n\n// Counts the # of sprites that have been successfully loaded\n// Poor man's asset manager\nfunction onSpriteReady(sprite) {\n    console.log(\"onSpriteReady: \" + sprite.id);\n    spriteList.push(sprite);\n    spritesLoaded++;\n    if (spritesLoaded >= spriteCount) {\n        for (let i=0; i< maxRenderedSprites; i++) {\n            let random_sprite_index = Math.floor(Math.random() * spriteCount);\n            let random_sprite = spriteList[random_sprite_index];\n            let random_x = Math.floor(Math.random() * 1280);\n            let random_y = Math.floor(Math.random() * 720);\n            let random_velocity = 0.04 + Math.random() * 0.04; //320 + Math.floor(Math.random() * 320);\n            let moving_object = new MovingObject(random_sprite, random_x, random_y, {x: random_velocity, y: 0});\n            moving_object.boundsRect = new Rect({top: 0, left: -40, width: 1320, height: 720});\n            movingObjects.push(moving_object);\n        }\n\n\n\n        if (useSetTimeout) {\n            //lastFrameTimeMs = Date.now();\n            //lastFpsUpdate = Date.now();\n            setTimeout(step,1);\n        } else {\n            //lastFrameTimeMs = 0;\n            //lastFpsUpdate = 0;\n            window.requestAnimationFrame(step);\n        }\n    }\n}\n\nfunction fillText(ctx, txt, font, x, y, color) {\n    ctx.save();\n    if (color) ctx.fillStyle = color;\n    ctx.font = font;\n    ctx.fillText(txt, x, y);\n    ctx.restore();\n}"],"sourceRoot":"/source/"}